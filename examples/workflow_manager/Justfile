export PYTHONPATH := "../../src:../../tests/_lib:../../cmd:./src"
# Workflow Manager Application - Justfile
# Modern Python package management using uv

# Show available commands
default:
    @just --list

# Install uv if not available
install-uv:
    @echo "📦 Installing uv..."
    curl -LsSf https://astral.sh/uv/install.sh | sh

# Create virtual environment and install dependencies
install:
    @echo "🚀 Setting up Workflow Manager..."
    uv venv
    uv pip install -r requirements.txt

# Install development dependencies
install-dev:
    @echo "🛠️ Installing development dependencies..."
    uv venv
    uv pip install -r requirements.txt
    uv pip install pytest-cov black isort flake8 mypy

# Sync dependencies (faster than install)
sync:
    @echo "🔄 Syncing dependencies..."
    uv pip sync requirements.txt

# Run the development server
run:
    @echo "🚀 Starting Workflow Manager..."
    python -m workflow_manager.main

# Run with auto-reload
dev:
    @echo "🔥 Starting development server with auto-reload..."
    uvicorn workflow_manager.main:app --reload --host 0.0.0.0 --port 8000

# Run tests
test:
    @echo "🧪 Running tests..."
    uv run pytest tests/

# Run tests with coverage
test-cov:
    @echo "🧪 Running tests with coverage..."
    uv run pytest tests/ --cov=src/workflow_manager --cov-report=html --cov-report=term

# Run fast tests (skip slow ones)
test-fast:
    @echo "⚡ Running fast tests..."
    uv run pytest tests/ -m "not slow"

# Run basic structure tests
test-basic:
    @echo "🏗️ Running basic structure tests..."
    python tests/test_basic.py

# Verify application setup
verify:
    @echo "✅ Verifying application setup..."
    python verify_setup.py

# Run custom test runner
test-runner:
    @echo "🔬 Running custom test runner..."
    uv run python run_tests.py

# Generate API documentation
docs:
    @echo "📚 API Documentation available at: http://localhost:8000/docs"
    @echo "📖 ReDoc available at: http://localhost:8000/redoc"

# Clean up temporary files
clean:
    @echo "🧹 Cleaning up..."
    find . -type f -name "*.pyc" -delete
    find . -type d -name "__pycache__" -delete
    rm -rf .pytest_cache/
    rm -rf htmlcov/
    rm -rf .coverage

# Format code with black
format:
    @echo "🎨 Formatting code..."
    uv run black src/workflow_manager/ tests/
    uv run isort src/workflow_manager/ tests/

# Lint code
lint:
    @echo "🔍 Linting code..."
    uv run flake8 src/workflow_manager/ tests/
    uv run mypy src/workflow_manager/

# Type check
typecheck:
    @echo "🔬 Type checking..."
    uv run mypy src/workflow_manager/

# Build for production
build:
    @echo "🏗️ Building application..."
    uv build

# Run security check
security:
    @echo "🔒 Running security check..."
    uv run pip-audit

# Update dependencies
update:
    @echo "📦 Updating dependencies..."
    uv pip list --outdated

# Create requirements.txt from current environment
freeze:
    @echo "❄️ Freezing current dependencies..."
    uv pip freeze > requirements.txt

# Run the application in production mode
prod:
    @echo "🚀 Starting production server..."
    PYTHONPATH=src uv run gunicorn workflow_manager.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

# Docker commands
docker-build:
    @echo "🐳 Building Docker image..."
    docker build -f img/Dockerfile -t workflow-manager .

docker-run:
    @echo "🐳 Running Docker container..."
    docker run -p 8000:8000 workflow-manager

docker-compose-up:
    @echo "🐳 Starting with Docker Compose..."
    cd dkc && docker-compose up

docker-compose-down:
    @echo "🐳 Stopping Docker Compose..."
    cd dkc && docker-compose down

# Docker Compose with environment setup
docker-setup:
    @echo "🔧 Setting up Docker environment..."
    @if [ ! -f dkc/.env ]; then cp dkc/.env.example dkc/.env && echo "📝 Created .env from template"; fi
    cd dkc && docker-compose up

# Development workflow
dev-setup: install-uv install verify
    @echo "🎉 Development environment ready!"

# CI/CD workflow
ci: test lint typecheck
    @echo "🎯 CI checks completed!" 